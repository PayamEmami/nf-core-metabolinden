{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/metabolinden/master/nextflow_schema.json",
    "title": "nf-core/metabolinden pipeline parameters",
    "description": "Metabolomics quaLIty coNtrol anD paramEter optimizatioN",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": [
                "input"
            ],
            "properties": {
                "input": {
                    "type": "string",
                    "fa_icon": "fas fa-dna",
                    "description": "Input mzML files (glob pattern is accepted e.g. *.mzML)",
                    "help_text": "Use this to specify the location of your input FastQ files. For example:\n\n```bash\n--input 'path/to/data/sample_*_{1,2}.fastq'\n```\n\nPlease note the following requirements:\n\n1. The path must be enclosed in quotes\n2. The path must have at least one `*` wildcard character\n3. When using the pipeline with paired end data, the path must use `{1,2}` notation to specify read pairs.\n\nIf left unspecified, a default pattern is used: `data/*{1,2}.fastq.gz`"
                },
                "outdir": {
                    "type": "string",
                    "description": "The output directory where the results will be saved.",
                    "default": "./results",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "hidden": true,
                    "fa_icon": "fas fa-question-circle"
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "hidden": true,
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": [
                        "symlink",
                        "rellink",
                        "link",
                        "copy",
                        "copyNoFollow",
                        "move"
                    ]
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "hidden": true,
                    "help_text": "This works exactly as with `--email`, except emails are only sent if the workflow is not successful."
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true,
                    "help_text": "Set to receive plain-text e-mails instead of HTML formatted."
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true,
                    "help_text": "Set to disable colourful command line output and live life in monochrome."
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.outdir}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true
                },
                "show_hidden_params": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested    for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": "Provide git commit id for custom Institutional configs hosted at `nf-core/configs`. This was implemented for reproducibility purposes. Default: `master`.\n\n```bash\n## Download and use config file with following git commit id\n--custom_config_version d52db660777c4bf36546ddb188ec530c3ada1b96\n```"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell nextflow where to find them with the `custom_config_base` option. For example:\n\n```bash\n## Download and unzip the config files\ncd /path/to/my/configs\nwget https://github.com/nf-core/configs/archive/master.zip\nunzip master.zip\n\n## Run the pipeline\ncd /path/to/my/data\nnextflow run /path/to/pipeline/ --custom_config_base /path/to/my/configs/configs-master/\n```\n\n> Note that the nf-core/tools helper package has a `download` command to download all required pipeline files + singularity containers + institutional configs in one go for you, to make this process easier.",
                    "fa_icon": "fas fa-users-cog"
                },
                "hostnames": {
                    "type": "string",
                    "description": "Institutional configs hostname.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        }
    ],
    "properties": {
        "need_centroiding": {
            "type": "boolean",
            "description": "If set to true, the data will be centroided",
            "default": true
        },
        "need_recalibration": {
            "type": "boolean",
            "description": "If set to true, the data will be recalibrated",
            "default": true
        },
        "publishDir_intermediate": {
            "type": "boolean",
            "description": "If set to true, the data from all the steps will be outputed",
            "default": true
        },
        "peak_picker_param": {
            "type": "string",
            "default": "peak_picker.ini",
            "description": "If need_centroiding is true, this must be an absolute path to one or a glob pattern to multiple ini files for PeakPickerHiRes tool in OpenMS"
        },
        "feature_finder_param": {
            "type": "string",
            "default": "feature_finder.ini",
            "description": "If need_quantification is true, this must be an absolute path to one or a glob pattern to multiple ini files for FeatureFinderMetabo tool in OpenMS"
        },
        "feature_linker_param": {
            "type": "string",
            "default": "feature_linker.ini",
            "description": "If need_linking is true, this must be an absolute path to one or a glob pattern to multiple ini files for FeatureLinkerUnlabelledQT tool in OpenMS"
        },
        "peak_recalibration_param": {
            "type": "string",
            "default": "Calibration_settings.ini",
            "description": "If need_recalibration is true, this must be an absolute path to one or a glob pattern to multiple ini files for InternalCalibration tool in OpenMS"
        },
        "addcut_param": {
            "type": "string",
            "default": "adducts.ini",
            "description": "If need_adducts is true, this must be an absolute path to one or a glob pattern to multiple ini files for XXX tool in OpenMS"
        },
        "recalibration_masses": {
            "type": "string",
            "description": "If need_recalibration or need_identification is true, this must be an absolute path to one tab separated file containing the internal standards",
            "default": "lock_masses.csv"
        },
        "need_quantification": {
            "type": "boolean",
            "default": true,
            "description": "Set to true if you want to do quantification"
        },
        "need_alignment": {
            "type": "boolean",
            "description": "Set to true if you want to do alignment",
            "default": true
        },
        "need_linking": {
            "type": "boolean",
            "description": "Set to true if you want to do feature linking",
            "default": true
        },
        "need_exporting": {
            "type": "boolean",
            "default": true,
            "description": "Set to true if you want to export the data to tsv format"
        },
        "need_adducts": {
            "type": "boolean",
            "description": "Set to true if you want to do adduct detection"
        },
        "need_identification": {
            "type": "boolean",
            "description": "Set to true if you want to do identification"
        },
        "feature_alignment_param": {
            "type": "string",
            "default": "feature_linker.ini",
            "description": "if need_alignment is true, this must this must be an absolute path to one or a glob pattern to multiple ini files for MapAlignerPoseClustering tool in OpenMS"
        },
        "identification_input": {
            "type": "string",
            "default": "tsv",
            "description": "If need_identification is true, this must be one or multiple TSV files containing at least an m/z column"
        },
        "identification_mz_column": {
            "type": "string",
            "default": "MZ",
            "description": "If need_identification is true, this must be the name of the column which has the m/z value in identification_input"
        },
        "identification_use_rt": {
            "type": "boolean",
            "description": "If set to true, we assume that the identification database (identification_input) has a an RT column"
        },
        "identification_convert_rt_to_seconds": {
            "type": "string",
            "description": "If set to true, the workflow will convert the retention time from minutes to seconds for the database (identification_input)"
        },
        "identification_rt_column": {
            "type": "string",
            "default": "RT",
            "description": "If identification_use_rt is true, this must be the name of the column in the database (identification_input) which has the retention time data"
        },
        "identification_max_rt": {
            "type": "integer",
            "default": 1,
            "description": "If identification_use_rt is false, we create fake data to do mapping using OpenMS, this is the maximum retention time for each metabolite"
        },
        "identification_min_rt": {
            "type": "integer",
            "default": 0,
            "description": "If identification_use_rt is false, we create fake data to do mapping using OpenMS, this is the minimum retention time for each metabolite"
        },
        "identification_scan_time": {
            "type": "integer",
            "default": 1,
            "description": "If identification_use_rt is false, we create fake data to do mapping using OpenMS, this is the scan time for each metabolite"
        },
        "internal_database_rt_tolerance": {
            "type": "integer",
            "default": 10000000,
            "description": "retention time tolerance for matching metabolite standard to the dataset (keep very high if you want to do global matching)"
        },
        "internal_database_ppm_tolerance": {
            "type": "integer",
            "default": 5,
            "description": "ppm error for matching standards with features"
        },
        "need_qc": {
            "type": "boolean",
            "description": "If set, the pipeline will perform quality control of the data"
        },
        "identification_name_column": {
            "type": "string",
            "default": "Compound",
            "description": "Name of the column showing actual name of the metabolite"
        },
        "covariate_qc": {
            "type": "string",
            "default": "batch2",
            "description": "Covariate for colouring the results"
        },
        "qc_file": {
            "type": "string",
            "description": "If need_qc is true, this file must be an experimental design file (tab separated) that contains at least two columns: \"file_name\" and \"runorder\". The file name must be the name of the sample files (without extension) and run order must be number showing in which order samples have been run"
        },
        "feature_linker_param2": {
            "type": "string",
            "default": "assets/parameters/FeatureLinkerUnlabeledQT.ini",
            "description": "If step_wise_linking is True and use_same_setting_for_second_linking"
        },
        "mapper_param": {
            "type": "string",
            "default": "mapper.ini"
        },
        "interactive_plot": {
            "type": "boolean",
            "description": "If True, the plots in the report will interactive."
        },
        "step_wise_linking": {
            "type": "boolean",
            "description": "If True, stepwise linking (faster) will be performed instead of one time linking"
        },
        "number_of_files": {
            "type": "integer",
            "default": 2,
            "description": "The number of files in each chunk."
        },
        "randomize_files": {
            "type": "boolean",
            "description": "If True, the files will be randomly chunked"
        },
        "seed_for_linking": {
            "type": "integer",
            "default": 10,
            "description": "Seed for ranomization"
        },
        "use_same_setting_for_second_linking": {
            "type": "boolean",
            "default": true,
            "description": "If True, same settings will be used for the second stage of the linking as it was used in the first one"
        },
        "need_filtering": {
            "type": "boolean",
            "default": true,
            "description": "Set to True if mzML files are to be filtered after peakpicking"
        },
        "file_filter_param": {
            "type": "string",
            "default": "assets/parameters/fileFilter.ini",
            "description": "Parameters for FileFilter OpenMS"
        },
        "need_minimal_exporting": {
            "type": "boolean",
            "description": "If true, a minimal output will be produced that only contains consensus elements and intensities for samples",
            "default": true
        },
        "output_ranges": {
            "type": "boolean",
            "description": "If ture, the spectra that matches the internal database (within a tolerance) will be outputed"
        },
        "scaller_internal_database_ppm_tolerance": {
            "type": "integer",
            "default": 1,
            "description": "internal_database_ppm_tolerance will be scalled by this"
        },
        "scaller_internal_database_rt_tolerance": {
            "type": "integer",
            "default": 1,
            "description": "internal_database_rt_tolerance will be scalled by this"
        }
    }
}